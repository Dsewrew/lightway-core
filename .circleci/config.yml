version: 2.1

orbs:
  win: circleci/windows@2.4.0

commands:
  build_and_test:
    parameters:
      project:
        type: string
      ceedling:
        type: string
        default: ceedling
      run_test:
        type: boolean
        default: true
      clean:
        type: boolean
        default: false
    steps:
      - when:
          condition: << parameters.clean >>
          steps:
            - run: git clean -dfx
      - run: << parameters.ceedling >> verbosity[4] project:<< parameters.project >> clobber
      - run: << parameters.ceedling >> verbosity[4] project:<< parameters.project >> dependencies:fetch
      - run: << parameters.ceedling >> verbosity[4] project:<< parameters.project >> dependencies:make
      - when:
          condition: << parameters.run_test >>
          steps:
            - run: << parameters.ceedling >> verbosity[4] project:<< parameters.project >> test
      - when:
          condition:
            not:
              equal: ["ios", << parameters.project >>]
          steps:
            run: << parameters.ceedling >> verbosity[4] project:<< parameters.project >> release

  android_arch_build:
    description: Builds android platform lib for provided architecture
    parameters:
      arch:
        type: string
    steps:
      - run: echo 'source ~/libhelium/android/android_env.sh << parameters.arch >>' > $BASH_ENV
      - build_and_test:
          project: android
          run_test: false
          clean: true
      - run:
          name: Merge object files of wolfssl and libhelium to create a single static file
          command: $AR x build/artifacts/release/libhelium.a && $AR x third_party/builds/wolfssl_build/lib/libwolfssl.a && $AR r libhelium.a *.o
      - run: |
          ARCH_DIR=$CIRCLE_ARTIFACTS/<< parameters.arch >>
          mkdir -p $ARCH_DIR && cp libhelium.a $ARCH_DIR/libhelium.a

  install_python_linux:
    description: Install python dependencies
    steps:
      - run:
          name: Install Python3, Pip3
          command: which pip3 || sudo apt-get update && sudo apt-get install python3 python3-pip
      - run:
          name: Install pip3 packages
          command: sudo pip3 install requests

jobs:
  build-linux:
    parameters:
      docker-image:
        type: string
      project:
        type: string
    working_directory: /libhelium
    docker:
      - image: << parameters.docker-image >>
    environment:
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
    steps:
      - checkout
      - run: apt-get update
      - run: apt-get -y install build-essential git automake m4 libtool-bin cmake ruby-full
      - run: gem install ceedling --no-user-install
      - build_and_test:
          project: << parameters.project >>
      - store_test_results:
          path: build/artifacts/test/
      - store_artifacts:
          path: build/artifacts/release/libhelium.a
          destination: linux/lib/libhelium.a

  build-linux-386:
    parameters:
      docker-image:
        type: string
      project:
        type: string
    working_directory: /libhelium
    docker:
      - image: << parameters.docker-image >>
    environment:
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      CC: clang
    steps:
      - checkout
      - run: apt-get update
      - run: apt-get -y install build-essential git automake m4 libtool-bin cmake ruby-full clang-7 gcc-multilib
      - run: echo 'export PATH=/usr/lib/llvm-7/bin:$PATH' >> $BASH_ENV
      - run: gem install ceedling --no-user-install
      - build_and_test:
          project: << parameters.project >>
          run_test: false
      - store_test_results:
          path: build/artifacts/test/
      - store_artifacts:
          path: build/artifacts/release/libhelium.a
          destination: linux/lib/libhelium.a

  build-linux-armhf:
    parameters:
      docker-image:
        type: string
      project:
        type: string
    working_directory: /libhelium
    docker:
      - image: << parameters.docker-image >>
    environment:
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      CC: arm-linux-gnueabihf-gcc
      STRIP: arm-linux-gnueabihf-strip
      QEMU: qemu-arm
      QEMU_LD_PREFIX: /usr/arm-linux-gnueabihf
      CROSS_COMPILE: arm-linux-gnueabihf
    steps:
      - checkout
      - run: apt-get update
      - run: apt-get -y install build-essential git automake m4 libtool-bin cmake ruby-full gcc-multilib-arm-linux-gnueabihf qemu-user
      - run: echo 'export PATH=/usr/lib/llvm-7/bin:$PATH' >> $BASH_ENV
      - run: gem install ceedling --no-user-install
      - build_and_test:
          project: << parameters.project >>
          run_test: false
      - store_test_results:
          path: build/artifacts/test/
      - store_artifacts:
          path: build/artifacts/release/libhelium.a
          destination: linux/lib/libhelium.a

  build-macos:
    parameters:
      project:
        type: string
        default: macos
      run_test:
        type: boolean
        default: true
    macos:
      xcode: "12.3.0"
    steps:
      - checkout
      - run:
          name: Install Ceedling
          command: |
            sudo gem install ceedling --no-user-install
      - run:
          name: Install automake
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install autoconf automake libtool
      - build_and_test:
          project: << parameters.project >>
          run_test: << parameters.run_test >>
      - store_test_results:
          path: build/artifacts/test/
      - store_artifacts:
          path: build/artifacts/release/libhelium.a
          destination: linux/lib/libhelium.a

  build-ios:
    macos:
      xcode: "12.3.0"
    environment:
      CIRCLE_ARTIFACTS: /tmp/circle-artifacts
    steps:
      - checkout
      - run:
          name: Install Ceedling
          command: |
            sudo gem install ceedling --no-user-install
      - run:
          name: Install automake
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install autoconf automake libtool
      - build_and_test:
          project: ios
          run_test: false
          clean: true
      - run:
          name: Copy all public headers into the umbrella framework
          command: cp public/*.h ios/Lightway/Lightway
      - run:
          name: Create xcframework
          command: |
            mkdir -p $CIRCLE_ARTIFACTS
            chown -R $USER $CIRCLE_ARTIFACTS
            chmod -R 777 /tmp
            chmod -R 777 $CIRCLE_ARTIFACTS
            cd ios/Lightway && pwd
            ./build-xcframework.sh
            tar -C Build/ -cvzf lightway_ios_xcframework.tar.gz Lightway.xcframework
            cp lightway_ios_xcframework.tar.gz $CIRCLE_ARTIFACTS
      - store_artifacts:
          path: /tmp/circle-artifacts
          destination: /

  build-windows:
    parameters:
      project:
        type: string
      ceedling:
        type: string
    executor:
      name: win/default
      shell: bash.exe -eo pipefail
    steps:
      - checkout
      - run:
          name: Install ruby
          command: |
            choco install ruby --version=2.7.1.1 -f -y --no-progress
            echo 'export PATH=/c/tools/ruby27:/c/tools/ruby27/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install MinGW
          command: |
            choco install mingw --version=8.1.0 --x86 -f -y --no-progress
            echo 'export PATH=/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw32/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install Ceedling
          command: |
            gem install ceedling --no-user-install
      - build_and_test:
          project: << parameters.project >>
          ceedling: << parameters.ceedling >>
          # FIXME: Test is disabled on windows builds for now. This is because ceedling tests add includes to
          #        wolfssl/user_settings.h which causes "WOLFSSL_DTLS_ALLOW_FUTURE not defined" error.
          run_test: false
      - store_test_results:
          path: build/artifacts/test/
      - store_artifacts:
          path: build/artifacts/release/libhelium.lib
          destination: windows/lib/libhelium.lib

  build-android:
    working_directory: ~/libhelium
    docker:
      - image: circleci/android:api-29-ndk
    environment:
      CIRCLE_ARTIFACTS: /tmp/circle-artifacts
    steps:
      - checkout
      - install_python_linux
      - run: sudo apt-get update
      - run: sudo apt-get -y install build-essential git automake m4 libtool-bin cmake ruby-full
      - run: gem install ceedling --no-user-install
      - run: mkdir -p $CIRCLE_ARTIFACTS
      - android_arch_build:
          arch: arm64-v8a
      - android_arch_build:
          arch: armeabi-v7a
      - android_arch_build:
          arch: x86
      - android_arch_build:
          arch: x86_64
      - run: cp -r public/. $CIRCLE_ARTIFACTS
      - run: tar -C $CIRCLE_ARTIFACTS -cvzf android_he_libs.tar.gz .
      - run: cp android_he_libs.tar.gz $CIRCLE_ARTIFACTS
      - store_artifacts:
          path: /tmp/circle-artifacts
          destination: /

default-filters: &default-filters
  tags:
    only: /^v.*/

workflows:
  version: 2
  build_all:
    jobs:
      - build-linux:
          docker-image: debian:buster
          project: linux
          filters: *default-filters
      - build-linux-386:
          docker-image: debian:buster
          project: linux_386
          requires:
            - build-linux
          filters: *default-filters
      - build-linux-armhf:
          docker-image: ubuntu:bionic
          project: linux_arm
          requires:
            - build-linux
          filters: *default-filters
      - build-macos:
          filters: *default-filters
      - build-ios:
          context: XAPIKEY
          filters: *default-filters
      - build-windows:
          name: build-windows-32
          project: windows_32
          ceedling: windows/ceedling32.bat
          filters: *default-filters
      - build-windows:
          name: build-windows-64
          project: windows_64
          ceedling: windows/ceedling64.bat
          requires:
            - build-windows-32
          filters: *default-filters
      - build-android:
          context: XAPIKEY
          filters: *default-filters
